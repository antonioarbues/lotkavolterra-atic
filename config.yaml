# Set in this file the parameters for the simulation

# Simulator
simulateGT: True  # if true, the ground truth is simulated
simulatePipeline: True  # if true, the estimator-controller pipeline is simulated

# Control
useControl: True
# Select the control to use
usePositiveControl: False   # equilibrium tracking
useOptimalControl:  True    # reference tracking
# Reference to track
ref_x:  1.0
ref_y:  2.0
ref_z:  8.0
ref_w:  5.0

# Timestep size
dt: 0.001

# Number of iterations
it: 2000

# Plot config
plot:             True    # if True, it plots every plotSize iterations. If false, every plot is disabled.
plotEvolution:    True
plotStateSpace:   True
plotVectorField:  True
plotEigenvalues:  True
plotStabilityXY:  False    # Generate plot with stability as a function of X, Y
resetPlotBuffer:  True
showControlInputs:  True
plot4dLimitCycle: True
plotSize: 30000   # number of timesteps to plot together

# Print config (in terminal)
printEquilibria:  False

# Initial conditions
# System 1
x0: 20.0   # prey 1: Rabbit
y0: 10.0   # predator 1: Burmese Python
# System 2
z0: 20.0   # prey 2: Deer
w0: 10.0   # predator 2: Eagle

# Control Parameters

# Positive Control: dx/dt = diag(x)*(A*(x-e)+k*u)
k1: 1.0
k2: 1.0
k3: 1.0
k4: 1.0
sigma:  1.0

# Optimal Control
k1o: 1.0
k2o: 1.0
k3o: 1.0
k4o: 1.0

# ESTIMATOR (EKF)
# Standard deviation of the states
Q11:  0.05
Q22:  0.05
Q33:  0.05
Q44:  0.05
# Standard deviation of the measurements
R11:  0.02
R22:  0.02
R33:  0.02
R44:  0.02

# SIMULATOR NOISE
# Standard deviation of the simulator
QS11: 0.05
QS22: 0.05
QS33: 0.05
QS44: 0.05

# Parameters for coupled system
# The reference Lotka-Volterra equations are:
# dxi/dt = xi(bi - sum_j(aij * xj))    ,    i=1,_,n
# In the 4 species case, there are 20 parameters to be set (4 in b and 4x4 in a)

b1:   4.0
b2:  -1.0
b3:   2.0
b4:   -1

# If X and Y are defined, they overwrite the following values
# a23=-X, a32=X/2
# a24=-Y, a42=Y/2
X:    0.4
Y:    0.2

# All other parameters which we don't study
a11:  0.0     #Effect on rabbit for rabbit/rabbit
a12:  0.5     #Effect on rabbit for rabbit/snake
a13:  0.0     #Effect on rabbit for rabbit/deer
a14:  0.0     #Effect on rabbit for rabbit/eagle
a21:  -1.0    #Effect on snake for snake/rabbit
a22:  0.0     #Effect on snake for snake/snake
a23:  -0.4    #Effect on snake for snake/deer
a24:  -0.2    #Effect on snake for snake/eagle
a31:  0.0     #Effect on deer for deer/rabbit
a32:  0.2     #Effect on deer for deer/snake
a33:  0.0     #Effect on deer for deer/deer
a34:  0.5     #Effect on deer for deer/eagle
a41:  0.0     #Effect on eagle for eagle/rabbit
a42:  0.1     #Effect on eagle for eagle/snake (Here predator prey can interchange, might be interesting to see what happens)
a43:  -1.0    #Effect on eagle for eagle/deer
a44:  0.0     #Effect on eagle for eagle/eagle

# Comparison among different Initial Conditions
compareIC:  False
n_IC: 3 # number of IC to try out

# System 1
x1: 10.0   # prey 1: Rabbit
y1: 10.0   # predator 1: Burmese Python
# System 2
z1: 20.0   # prey 2: Deer
w1: 10.0   # predator 2: Eagle

# System 1
x2: 50.0   # prey 1: Rabbit
y2: 20.0   # predator 1: Burmese Python
# System 2
z2: 50.0   # prey 2: Deer
w2: 10.0   # predator 2: Eagle

# System 1
x3: 20.0   # prey 1: Rabbit
y3: 20.0   # predator 1: Burmese Python
# System 2
z3: 20.0   # prey 2: Deer
w3: 10.0   # predator 2: Eagle

# Stability plot for different X and Y
stability_discretization: 15
